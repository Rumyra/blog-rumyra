<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rumyra's Blog]]></title><description><![CDATA[Personal blog of Ruth John]]></description><link>https://blog.rumyra.com</link><generator>metalsmith-feed</generator><lastBuildDate>Sun, 18 Feb 2018 22:11:07 GMT</lastBuildDate><atom:link href="https://blog.rumyra.com/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[This blogs styleguide]]></title><description><![CDATA[<h2>Main Header</h2>
<h3>Sub Header</h3>
<h5>Small caps</h5>
<p class="body__text">This is a regular text size paragraph. Skate ipsum dolor sit amet, judo air boned out Christ air ollie impossible locals. Salad grind masonite indy grab bearings cess slide slappy. Dudesblood smith grind axle hang ten rail slide coper downhill. Tail boneless slide Omar Hassan coping chicken wing axle set.</p>
<p class="article__text">This is a reading paragraph. Hang up rocket air hand rail Kevin Harris kick-nose dude grab. Powerslide opposite footed alley oop air nose-bump Kien Lieu Saran Wrap hip. No comply Neal Hendrix front foot impossible rocket air 1080 downhill hanger stoked.</p>
<p class="article__text">Another reading paragraph, with link, bold/strong, italic/em etc... Pop <a href="#">shove-it powerslide nosegrind drop in gnar</a> bucket. Hand rail <strong>impossible hard flip</strong> skater Jeremy Klein Kevin Harris. Shoveit <em>crailtap grind</em> pressure flip nosegrind. Andrew Reynolds hurricane sketchy layback full-cab bearings. Pump nose camel back alley oop chicken wing.</p>
<h5>Feature image</h5>
<figure class="media__feature" markdown="1">
<figcaption>Oh my god it's evil!</figcaption>
<picture>
	<source srcset="/media/almenac.jpg" media="(min-width: 660px)">
	<img src="/media/almenac.jpg" alt="Description of image here" />
</picture>
</figure>
<h5>Regular image</h5>
<figure class="" markdown="1">
<figcaption>Oh my god it's evil!</figcaption>
<picture>
	<source srcset="/media/almenac.jpg" media="(min-width: 660px)">
	<img src="/media/almenac.jpg" alt="Description of image here" />
</picture>
</figure>
<h5>Tweets</h5>
<div class="article__tweet" tweetID="963924756373430274"></div>
<h5>Code</h5>
<pre><code class="language-javascript">// set up audio context
var audioContext = (window.AudioContext || window.webkitAudioContext);
// create audio class
if (audioContext) {
  // Web Audio API is available.
  var audioAPI = new audioContext();
  } else {
  // Web Audio API is not available. Ask the user to use a supported browser.
  alert("Oh nos! It appears your browser does not support the Web Audio API, please upgrade or use a different browser");
}

// variables
var analyserNode,
  frequencyData = new Uint8Array(256);
const screen = document.querySelector('#screen'),
  allRepeatedEls = document.querySelectorAll('#screen section'),
  totalEls = allRepeatedEls.length;
</code></pre>
<h5>Blockquotes</h5>
<blockquote>
<p>You're decision might be 'Should I use SASS' well the answer to that one is yes but…</p>
</blockquote>
<h5>Lists</h5>
<ul>
<li>This is a learning experience for me too, so things may stay quite basic. The code will probably <em>be</em> basic, however this does mean it won’t be too complicated for entry level coders.</li>
<li>I’ll be analysing audio from the microphone, which means I’ll be using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API">Media Streams API</a>, which only works over https, you’ll need to view the pens over https://codepen.io</li>
<li>Things work best in Canary so I’ve noticed, please don’t expect pens to work cross browser. The main end game for me is to integrate them into my VJ software, which I run in a sandboxed environment (my machine, my choice of browser) sux I know!</li>
<li>I’ll be cross posting all these articles to both my <a href="https://codepen.io/Rumyra/posts/published/">Codepen Blog</a> and <a href="http://rumyrashead.com/">my personal blog</a>.</li>
<li>There's a high chance I won't make every single day, but I will try 🙃</li>
</ul>
<ol>
<li>Raspberry</li>
<li>Rambutan</li>
<li>Redcurrant</li>
<li>Salak</li>
<li>Satsuma</li>
<li>Soursop</li>
<li>Star fruit</li>
</ol>
]]></description><link>https://blog.rumyra.com/2018-02-13-this-blogs-styleguide</link><guid isPermaLink="true">https://blog.rumyra.com/2018-02-13-this-blogs-styleguide</guid><pubDate>Tue, 13 Feb 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Hash Two]]></title><description><![CDATA[<h3>Codevember Hash Two</h3>
<p>It's <strong>Sapphire</strong> subject today so here's a little audio vis instead of a grid practice, as it seemed to fit a little betterer.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="XzdVKJ" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember Hash 2" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/XzdVKJ/">Codevember Hash 2</a> by Rumyra (<a href="https://codepen.io/Rumyra">@Rumyra</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>The biggest change I've made to the audio-vis software I'm building (Vizra) is to move the visuals to a canvas element to help performance. Drawing (&amp; re-drawing) a butt ton of SVGs wasn't working too well. So the audio vis you'll see this Codevember are all going to be on canvas - not too much change to the actual visuals from last year. But most of work this year has been around the nuts and bolts of the software rather than the vis themselves.</p>
<p>Weirdly I have run into <em>more</em> performance problems recently, but that's a whole other blog post, in fact a whole series!</p>
]]></description><link>https://blog.rumyra.com/2017-11-04-codevember-hash-two</link><guid isPermaLink="true">https://blog.rumyra.com/2017-11-04-codevember-hash-two</guid><pubDate>Sat, 04 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Hash One]]></title><description><![CDATA[<h3>Codevember 2017</h3>
<p>Wow I almost wrote 2018 then! It's here CODEVEMBER!! ALL THE EMOJIS</p>
<p>tl:dr;</p>
<ul>
  <li>It's Codevember</li>
  <li>Gonna do some CSS Grid</li>
  <li>Probably not every day</li>
  <li>Got a book for inspiration</li>
  <li>Will write notes</li>
</ul>
<p>I haven't written much this year, it's been pretty busy... I think I'll make it more of a focus next year, there's so much I want to learn and then hopefully write about. This year has very much been about sharing my thus far found knowledge. Which I will continue to do, but there's so many things which have taken a back seat and I need to sit and learn.</p>
<p>Which is where this Codevember comes in. I need to get more practise with grid layout. I'll be teaching it in January to my bootcamp students as I'm revising my part of the course and I really want to stretch myself with it. Get it into muscle memory, and hopefully do a bit more flexbox as well. I've done a fair bit now, but I still feel like there's a lot of trial and error with both when I use them. I'm not use to this, other methods just fall off the finger tips. It'd be great to learn these inside out too.</p>
<p>I know already I can't do every day this month. I'm on a project as I write this and have 3 conferences lined up... Also I really want to buy a Nintendo Switch.</p>
<p>Don't worry, I <em>have</em> done some more visuals this year I want to share, so expect some of them mixed in too 😄</p>
<h3>Hash 1</h3>
<p>INSPIRATION Y'ALL 😄 You know how much I luv inspiration. Check out this book</p>
<figure>
  <img src="/media/cssGridBook.jpg" />
  <figcaption>Make and Break the Grid</figcaption>
</figure>
<p>I totally borrowed this from a work place years and years ago, then I forgot and then I left the job (:embarrassed_face:) but we had a googles today and you can get it for £16, so if anyone is missing it and needs reimbursing hit me up (soz).</p>
<p>I mean the title says it all really. It's got loads and loads of layouts based on different grids all the way through it. See those sticky tabs? I went through it last night and highlighted what I thought to be easy -&gt; harder layouts through the use of colour. We'll see how I get on.</p>
<h3>The exercise here is not to copy them directly...</h3>
<p>I have complete artist control, they are <em>inpiration</em>. What I want is to practise using CSS Grid, if there's part of a layout I want to change to practise something I will most likely do this.</p>
<p>So to start simple here's the first day.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="Vrerme" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="CSS Grid #1 : Codevember '17" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/Vrerme/">CSS Grid #1 : Codevember '17</a> by Rumyra (<a href="https://codepen.io/Rumyra">@Rumyra</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>Inspired by this lovely image:</p>
<figure>
  <img src="/media/cssGrid1.jpg" />
  <figcaption>Simple Image Grid</figcaption>
</figure>
]]></description><link>https://blog.rumyra.com/2017-11-02-codevember-hash-one</link><guid isPermaLink="true">https://blog.rumyra.com/2017-11-02-codevember-hash-one</guid><pubDate>Thu, 02 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[How To Be On Fire]]></title><description><![CDATA[<p>So the other day I shared a relatively crazy experience I had in Vienna last week.</p>
<blockquote class="twitter-tweet" data-partner="tweetdeck"><p lang="en" dir="ltr">Thankfully gettin my hair sorted out after I CAUGHT IT ON FIRE in Vienna (ask <a href="https://twitter.com/csswizardry">@csswizardry</a> )<br><br>Expect totally on fire short haired Ruth 🔥</p>&mdash; Ruth John (@Rumyra) <a href="https://twitter.com/Rumyra/status/864100996422696960">May 15, 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Anyway, thanks very much for everyone's concern and questions. I thought it probably deserved a little more explanation.</p>
<p>I set my hair on fire, well I say <em>I</em> it was completely by accident and totally random.</p>
<p>I had just met up with Harry for a natter and a couple of drinks. We found a lovely bar to sit down in, ordered a couple of glasses of local viennese wine and with that Harry takes one look at me, eyes widening with what I can only describe as fear and the unfortunate words 'Ruth, I think your hair is on fire'.</p>
<p>Behind my seat was a little ledge, with a little row of candles. I hadn't thought anything of it and pulled my hair up into a pony tail. But by doing so had completely endangered myself. Sure enough my hair was in fact on fire.</p>
<p>Without even thinking, well ok I was thinking, I was thinking I needed to snuff the flames out, with my hand, which I infact did. But by doing so a big chunk of hair came with it, as did a ton of ash which fell all over the table.</p>
<p>Poor Harry. There I was still not quite sure what had happened, and here he was, with what I can only describe as a desecrated hair mess on the table.</p>
<p>Still, I wasn't injured, the flames were out and like he re-assured me throughout my paranoid mumblings through the night, 'you can't even tell'. I am 100% sure he was ready to pour a glass of water over me like a true hero!</p>
<p>Anyway, all is well that ends well and I visited my babe of a hairdresser yesterday. By the time I'd explained the events of the evening she had rightfully sorted out the escapade. And really I think I quite like the new hair length ☺️</p>
<figure class="media-feature">
  <img src="/media/hair.jpg" />
  <figcaption>Before and after photos of the hair fiasco</figcaption>
</figure>
]]></description><link>https://blog.rumyra.com/2017-05-17-how-to-be-on-fire</link><guid isPermaLink="true">https://blog.rumyra.com/2017-05-17-how-to-be-on-fire</guid><pubDate>Wed, 17 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Review]]></title><description><![CDATA[<p><em>I wrote this back in December, then hopped in a campervan and travelled round Australia and barely opened my laptop. It's probably still worth releasing tho</em> 👉</p>
<p>Firstly let's go over the last few - here's the inspiration:</p>
<h3>Concentric Circles</h3>
<figure>
  <img src="/media/superConcen.jpg" />
  <figcaption>Concentric Circles</figcaption>
</figure>
<p data-height="300" data-theme-id="1345" data-slug-hash="QGMyXm" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="AudioVis Codevember #16" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/QGMyXm/">AudioVis Codevember #16</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>This was an extension of the sunburst really, it's just the shapes are being extended around rather than out. <em>Super</em> luv this (see what I did there)</p>
<h3>Just Circles</h3>
<figure>
  <img src="/media/superCircles.jpg" />
  <figcaption>Super Circles</figcaption>
</figure>
<br />
<p data-height="300" data-theme-id="1345" data-slug-hash="ENvwMK" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="AudioVis Codevember #17" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/ENvwMK/">AudioVis Codevember #17</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>It seems simple but you can have fun with this, lots of size and distribution fun.</p>
<h3>Custom SVGs</h3>
<p>This is Takashi Murakami. He's a crazy artist, I found this book at a random second hand sale at my mums old school:</p>
<figure>
  <img src="/media/takashiCover.jpg" />
  <figcaption>Takashi Murakami book cover</figcaption>
</figure>
<p>Then he had an exhibition when I was in London and I spot his work regularly at other exhibition. Suffice to say it's pretty awesome. Anyway super uber great for playing with a custom SVG:</p>
<figure>
  <img src="/media/takashiScene.jpg" />
  <figcaption>Takashi Murakami scene</figcaption>
</figure>
<p data-height="300" data-theme-id="1345" data-slug-hash="pNdmBO" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #19" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/pNdmBO/">Codevember AudioVis #19</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>All using the d3 technique, which I'm super enjoying for a number of reasons:</p>
<ul>
<li>Perfomance</li>
<li>SVGs</li>
<li>Can also be used with Canvas and DOM elements</li>
<li>I haven't even begun with other methods which I'm super excited about</li>
<li>Within the final software I just have to set some params and call a function to create the vis - this integrates really well within the eco system</li>
</ul>
<h2>Retrospective</h2>
<h3>Things I learnt/enjoyed</h3>
<ul>
<li>That trying to code a pen every single day is hard - especially if you are learning new techniques <em>and</em> writing blog posts</li>
<li>Inspiration is cool, it gives you some boundaries. I luv making vis the sky is the limit, but this can be intimidating some times and you need a thread to start</li>
<li>Some d3, which makes me happy</li>
<li>Which techniques worked the best for visuals in a browser, or rather which ones worked better than others</li>
<li>It really made me think about integration into the vis software</li>
</ul>
<h3>Things I didn't/would do different next time</h3>
<ul>
<li>I was also travelling throughout November and didn't take that into account, although I didn't think I'd hit 30 pens, I thought I would do better than 19</li>
<li>I really wanted to try canvas and webGL and didn't get that far</li>
<li>I would load music, rather than using the mic so it would work over http, I think people are confused by the https link</li>
</ul>
<h3>Summary</h3>
<p>I actually think this is the start of something. I've been meaning to release audio-vis into the wild for a while and it was a great excuse to get started.</p>
<p>My VJ software Vizra has also got off the ground. There's an original hack version of the software which I've been experimenting with, performing with and generally messing around with for the past 18 months or so - but it's great to get a proper build off the ground.</p>
<h4>Note from December</h4>
<p>I'm taking a break for the rest of December - I'm in Australia for JSconfAU and will be travelling around once this is over, until Christmas. But there will be more, I can guarantee that, so just <a href="https://twitter.com/Rumyra">follow me</a> to keep up to date 😃</p>
<h4>Note from now</h4>
<p>This work made a big part of my talk for JSConfAU which was actually one of my favourtie talks from last year. I've also started other work in different areas of the vis, like the analysis part started in <a href="http://12devsofxmas.co.uk/2017/01/day-12-beat-dis-re-addressing-audio-analysis/">this article for 12 Devs of Xmas</a>.</p>
<p>Basically it's all go and super cool and Codevember was awesome 🕶</p>
]]></description><link>https://blog.rumyra.com/2017-01-25-codevember-review</link><guid isPermaLink="true">https://blog.rumyra.com/2017-01-25-codevember-review</guid><pubDate>Wed, 25 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Fifteen]]></title><description><![CDATA[<h3>Super Sun</h3>
<p>Today's inspiration is:</p>
<figure>
  <img src="/media/superSun.jpg" />
  <figcaption>The Super Sun</figcaption>
</figure>
<p>Today's is a little bit trickier as we have to create arc elements drawn in a circle that increase their outer arc with our data. But otherwise the code goes much the same as the previous days.</p>
<p>Sorry this isn't more insightful, but I am on a train on the way to the airport! Hopefully I'll be making more on the plane ✈️</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="MbmwGy" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="AudioVis Codevember #15" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/MbmwGy/">AudioVis Codevember #15</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
]]></description><link>https://blog.rumyra.com/2016-11-22-codevember-number-fifteen</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-22-codevember-number-fifteen</guid><pubDate>Tue, 22 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Thirteen and Fourteen]]></title><description><![CDATA[<h2>Part Three: d3.js</h2>
<p>Before I start I want to give a big shout out to <a href="https://twitter.com/benjaminbenben">Ben (@benjaminbenben)</a> who was helping me with some performance stuff I having trouble with. In doing so he really opened my eyes to how powerful d3 is and actually how suited a library it is to help with what we are doing here.</p>
<p>It’s dubbed a ‘visualisation library’, however I think it’s relationship with data has given it a reputation that makes people who haven't discovered it, assume it’s just for pie charts. That’s changing now, and don’t get me wrong it’s good for displaying data, but that’s just it it’s good with displaying <em>and</em> it’s good with data. So anything you want to do with the DOM or anything you want to do with data and d3 has you covered.</p>
<p>I’ve noticed a lot of the things I’m building use a great deal of DOM manipulation and data manipulation, so it felt like a great thing to start playing with. It’s also worth noting here I’m using version 3, version 4 was recently released with a great deal of updates and changes, but as I’m learning and pretty much all the tutorials still use version 3, I’m going to stick with that. When I’m more comfortable with the library I can start to look at the update documentation.</p>
<p>Just have a glance down the <a href="https://github.com/d3/d3/blob/master/API.md">API reference</a> and we can see some totally useful data functions, array methods, thing’s for colour, layout, timing… well loads of stuff which is great for what I’m doing here. Not just with creating, but keeping and manipulating, which is easier than me writing it all out manually, and will be much better performance wise as well.</p>
<p>Ok, ok, enough evangelising. Let’s get using.</p>
<p>We need data to get d3 to really do anything, but we have that, we have this array of velocity values from our frequency; <code>frequencyData</code>. We can get d3 to create an element for each item in the array, attach the relative data to each element and then start to use it to manipulate the DOM element, whether that be change it’s size, position, colour of whatever.</p>
<h3>Number Thirteen: Super Chart</h3>
<figure>
  <img src="/media/superGraphic.jpg" />
  <figcaption>Cover of Super Graphic book by Tim Leong</figcaption>
</figure>
<p>My inspiration for this series is from the book <em>Super Graphic</em> by Tim Leong. It's a bunch of data visualisations from and about comic books. Check it out it's pretty sweet. Perfect for inspiration for audio vis!</p>
<p>So let’s start with this example:</p>
<figure>
  <img src="/media/superCharts.jpg" />
  <figcaption>The Super Charts</figcaption>
</figure>
<p>At the moment we have 256 items in our frequency array, piping that into d3 would mean it would create 256 elements, one for each frequency (unless we did some array manipulation, but for simplicities sake, let’s just reduce the number of elements).</p>
<p>So let’s change it to less: <code>frequencyData = new Uint8Array(16);</code> Remembering to change our fft size as well as we don't need it to be as big: <code>analyserNode.fftSize = 32;</code></p>
<p>Now all we need is a little d3 <a href="https://bl.ocks.org/mbostock/3808218">“enter and exit”</a> pattern. This is where we take the data and create a new element for each item, bind the data item to said element and add some params using said data.</p>
<pre><code class="language-javascript">// enter and exit
var svg = d3.select('svg');
var circle = svg.selectAll('circle'),
  radius = window.innerHeight/2.5-50;

function drawCircles() {

  requestAnimationFrame(drawCircles);
  analyserNode.getByteFrequencyData(frequencyData);

  circle = circle.data(frequencyData);

  circle
    .enter().append('circle')
    .attr("cy", function(d, i) {
      return Math.round(window.innerHeight/2 + (radius*Math.sin((2*i*Math.PI)/16)) );
    })
    .attr("cx", function(d, i) {
      return Math.round(window.innerWidth/2 + (radius*Math.cos((2*i*Math.PI)/16)) );
    });

  circle
    .attr("r", function(d) { return d/2; })
    .attr("fill", "hsla(200,50%,80%,0.7)")
    .exit().remove();
}
</code></pre>
<p>Here we’re creating a circle for each item in the <code>frequencyData</code> array, then positioning them in a circle with a bit of maths. The params <code>d</code> and <code>i</code> being passed into the function are the data itself and the item number. So further below when we set the radius of the circle we can use the data, which as we know is the frequency velocity.</p>
<p>This all seems a little more succinct than how we were going about it before. In the final example I’m also creating a line, just to add a bit more 🤗</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="ENWLzK" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #13" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/ENWLzK/">Codevember AudioVis #13</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>You can already see the difference in performance compared to previous days. I’m from the &quot;apprehensive to use a library unless I need/know etc…&quot;&quot; camp of JS, but in this instance it’s really helping. Most of the rest of the example are probably going to incorporate it I can imagine. So as we go through the next few days we can see what else d3 has to offer.</p>
<h3>Number Fourteen: Super Colours</h3>
<p>What can I say - this one is probably the most me so far!</p>
<figure>
  <img src="/media/superColours.jpg" />
  <figcaption>The Super Charts</figcaption>
</figure>
<p>The technique is much the same as the previous example, just this time we’re creating SVG <code>rect</code> elements and doing some maths to position and colour them. The data is being used to adjust the brightness of the squares, although we could use it for anything. Another good example that would be good to live code at a gig.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="mOWKdL" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="mOWKdL" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/mOWKdL/">mOWKdL</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
]]></description><link>https://blog.rumyra.com/2016-11-21-codevember-number-thirteen-and-fourteen</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-21-codevember-number-thirteen-and-fourteen</guid><pubDate>Mon, 21 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Eleven And Twelve]]></title><description><![CDATA[<p>This is an experiment in symmetry. An effect that would be great in the final audio vis software.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="bBqbBX" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #11" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/bBqbBX/">Codevember AudioVis #11</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>The original idea is a function that would take whatever was in the DOM and reflect and repeat it around so it would automatically make it look awesome.</p>
<p>It's kinda there - it needs some tweaking depending on whether we have an animation or gif/video that's needing the effect. Something that take some params depending on whether we want it rotated or reflected would be the best final solution me thinks.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="Ropbyv" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #12" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/Ropbyv/">Codevember AudioVis #12</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
]]></description><link>https://blog.rumyra.com/2016-11-20-codevember-number-eleven-and-twelve</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-20-codevember-number-eleven-and-twelve</guid><pubDate>Sun, 20 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Nine And Ten]]></title><description><![CDATA[<p>Phew, there was a break wasn't there! Apparently it's hard to keep up when you're on the road. So I thought there's probably only one thing to do and that's try and do <em>two</em> codevembers for the next few days to make up for it.</p>
<p>Let's see how that goes 🤓</p>
<h3>AudioVis #9</h3>
<p>NB This one comes with a warning. The way I coded this is highly UNRECOMMENDED. Not only was it a total ball ache, it doesn’t perform well and there are work arounds. It took what felt like days and the result is not amazing. If you’re wondering, I would probably use canvas for an audio vis of this nature in future. Hashtag learning, amiright?</p>
<p>So today I’m going to expand a little on yesterday and take influence from <a href="http://intothecontinuum.tumblr.com/post/119241330868/maihudson-mathematica-codesn-t-sinn3">this crazy gif</a></p>
<p>But in my version, I want a shape for each of the low frequencies, the mid frequencies and the high frequencies, that change depending on the level we get back from the analysis.</p>
<p>I'm setting a load more custom properties than the previous <a href="https://codepen.io/Rumyra/pen/yVeoJo">codevember</a>, so I'm looping over them in the JS. Things I learnt include:</p>
<ul>
<li>We actually don’t need to set those properties in the root block at the top of our CSS if we’re setting them within our JavaScript. They’re set there, so they get passed into the CSS regardless... nuice!</li>
<li>Maths in CSS is hard, even with nice things like a <code>calc</code> function and shiny extras preprocessors like Sass give us. JavaScript is much better as maths, so I found keeping number crunching there is a lot better. Just pass the value you want in the CSS into the custom property.</li>
</ul>
<p data-height="300" data-theme-id="1345" data-slug-hash="NbdXaE" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #9" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/NbdXaE/">Codevember AudioVis #9</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>This one was a great learning experience and great experiment, even if the final result wasn't ideally what I was after at the start. I would keep using custom properties to do things like filter effects and glitch's for final VJing rather than modifying multiple DOM elements with them in the future.</p>
<h3>AudioVis #10: Blend Modes 😎</h3>
<p>Inspiration:</p>
<figure>
  <img src="http://66.media.tumblr.com/cc6b92fc94e847f5358890da3ed2c5c5/tumblr_nobi29xtOO1sn5m9vo4_1280.gif" />
</figure>
<p>I've actually written about using blend modes for <a href="http://rumyrashead.com/a-little-thing-about-blends.html">this audio vis before</a>. The make up of the visual itself isn't too different code wise to previous ones. I have some DOM elements, I am positioing them, I am animating them, the only extra feature I am encorporating is blend modes on the elements to see what effect that has.</p>
<p>It looks super nice, but with all the DOM elements I have with this one performance isn't so great. I can up it by making sure I add the <code>will-change</code> property in the CSS to any elements that have any other properties that are to change.</p>
<p>However I think we should probably move into a better, more performant way of creating and manipulating DOM els for audio vis, don't you?</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="BQprdW" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #10" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/BQprdW/">Codevember AudioVis #10</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
]]></description><link>https://blog.rumyra.com/2016-11-19-codevember-number-nine-and-ten</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-19-codevember-number-nine-and-ten</guid><pubDate>Sat, 19 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Eight]]></title><description><![CDATA[<h3>Part Two: Random Cool New Features</h3>
<p>So this next section I did ponder for a while. I could take you straight on to a much better way of creating visuals within the DOM, but before I do that I want to introduce some new features we have in simple CSS that can really help our visuals later down the track. Our inspiration for this set is a little tumblr called <a href="http://intothecontinuum.tumblr.com/">Archery: Into the Continuum</a>. Here I want to take inspiration from some of these random gifs, not exactly replicate them.</p>
<p>So first up, this gif:</p>
<figure>
  <img src="http://67.media.tumblr.com/e829a18961367c45baf1c2dcbcea47a0/tumblr_mr6p8hVjSQ1qfjvexo2_r1_500.gif" />
</figure>
<h3>Custom Properties</h3>
<p><em>Or</em> JavaScript all up in your CSS</p>
<p>And the much talked about CSS Custom properties. ✨💥💜 We can really use these to our advantage when doing audio vis work as we can reference them directly in our JavaScript and basically update our CSS in realtime.</p>
<p>Custom properties are declared at the start of your CSS with a <code>:root</code> block and can be references throughout your CSS, much like (but not entirely) pre-processor variables. So instead of declaring properties that make sense as far as styling goes, I’m going to be changing them within my JavaScript, so it makes sense to name them something a little more explicit.</p>
<p>For this we’ll create a <code>—level</code> property, and just grab one of the items of the <code>frequencyData</code> array and pipe it in. This is where the magic happens:</p>
<pre><code class="language-css">:root {
  --level: 1;
}</code></pre>
<pre><code class="language-javascript">document.documentElement.style.setProperty('--level', frequencyData[10]/255);
</code></pre>
<p>This —level property will now update <em><em>within our  css</em></em>. Oh. My. Gawd. I know right… 😱</p>
<p>Magic!</p>
<p>So if we use it on the opacity for instance:</p>
<pre><code class="language-css">i {
  opacity: var(--level);
}</code></pre>
<p>Boom! Opacity of <code>i</code> updated! In real time, in our CSS.</p>
<p>I know - all the wows!</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="yVeoJo" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="yVeoJo" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/yVeoJo/">yVeoJo</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></description><link>https://blog.rumyra.com/2016-11-10-codevember-number-eight</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-10-codevember-number-eight</guid><pubDate>Thu, 10 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Five]]></title><description><![CDATA[<p>Today sees the last in our Bridget Riley series. We'll move on to something different tomorrow...</p>
<p>Today is Bridget Riley's Static 4:</p>
<figure>
  <img src="/media/bridgetStatic.jpg" />
  <figcaption>Bridget Riley : Static 4</figcaption>
</figure>
<p>This harks back to day three really, but it’s just a nice easy one. Albeit getting the circles to grow from the centre. Again nothing too special here, but it’ll look super good laid over a video I’m sure 😃</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="yVypOR" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #5" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/yVypOR/">Codevember AudioVis #5</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s end on a classic: <a href="https://www.youtube.com/watch?v=KYSPfTMyJ2s">A to the K - Cyprus Hill</a>.</p>
]]></description><link>https://blog.rumyra.com/2016-11-06-codevember-number-five</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-06-codevember-number-five</guid><pubDate>Sun, 06 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Four]]></title><description><![CDATA[<p>We're in it for the long haul - so we're still using the same technique. Stick with me - come next week, I'll be looking at some different, new shiny things and the week after the same. Over the next month we shall learn some great audio vis techniques together. These ones aren't bad btw - they may just not be 'wow' juuuussstt yet 🙃</p>
<p>This is my inspiration for today’s pen: Bridget Riley's Quiver 3.</p>
<figure>
  <img src="/media/bridgetQuiver.jpg" />
  <figcaption>Bridget Riley : Quiver 3</figcaption>
</figure>
<p>I really like this one, although it took a few tricks to get the triangles looking and positioned right. And I even didn't replicate the curved edges particularly. Later on in this series I'm going to explore different techniques and hopefully find better ways of creating shapes like these (SVGs anyone?).</p>
<p>The only big difference here is I’m jumping up the frequencies by 4 steps at a time, as there’s only 40 elements.</p>
<p>Also, I'm only showing elements (or setting an opacity more than zero) when the frequency velocity hits over 50.</p>
<pre><code class="language-javascript">if (freqVol > 50) {
  allRepeatedEls[i].style.opacity = freqVol/150;
} else {
  allRepeatedEls[i].style.opacity = 0;
}
</code></pre>
<p>Tweaked for <a href="https://www.youtube.com/watch?v=zN226CmaNcI">Witness the Fitness by Roots Manuva</a></p>
]]></description><link>https://blog.rumyra.com/2016-11-05-codevember-number-four</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-05-codevember-number-four</guid><pubDate>Sat, 05 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Three]]></title><description><![CDATA[<p>This is my inspiration for today’s pen: Bridget Riley's Dilated Centres.</p>
<figure>
  <img src="/media/bridgetCentres.jpg" />
  <figcaption>Bridget Riley : Dilated Centers</figcaption>
</figure>
<p>You may not be able to tell but the the circles aren’t quite concentric. The lovely <a href="http://www.lottejackson.com/learning/nth-child-cicada-principle">Lotte Jackson wrote a post</a> just over a month ago, about cicada, which reminded me about this piece. It used prime numbers and border radius’ to create a great ‘blobby’ effect on some images she was displaying on a website. It was a totally awesome technique, and I really wanted to try it out. What a great pen to do so with.</p>
<p>Not much of the code from yesterday has changed at all apart from the DOM elements and a hec of a lot more CSS. Here I’m changing the border radius when I am looping over the <code>i</code>’s in the <code>animateStuff()</code> function. We have more elements this time so it feels a bit better.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="BQayWP" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #3" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/BQayWP/">Codevember AudioVis #3</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
I’d recommend the [opening credits to Luke Cage](https://www.youtube.com/watch?v=1gbHItHuZ0E) for this one.
]]></description><link>https://blog.rumyra.com/2016-11-03-codevember-number-three</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-03-codevember-number-three</guid><pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number Two]]></title><description><![CDATA[<p>I’ve gone straight for something a bit weird for day two. But we’re not doing too much different from day one. Just adding a different background gradient to the divs, displaying them with a little flex magic and again changing the widths.</p>
<p>Yes these vis are simple, but I think it's good we're starting simple, stay with me and we'll see where we end!</p>
<figure>
  <img src="/media/bridgetSquares.jpg" />
  <figcaption>Bridget Riley : Movement in Squares</figcaption>
</figure>
<p>It’s pertinent I didn’t change much, all these little codevembers are all part of a bigger remit to add to my browser powered VJ software: Vizra. By writing a different one each day I can begin to see what functionality to include in the software. For instance a ‘live coding’ editor would be great so as I’m running the software I can change the previous days to todays whilst I’m performing. That would be a cool feature.</p>
<p><a href="https://www.youtube.com/watch?v=B-y-lS0YqF0">Mos Def - Ms Fat Booty</a> for this one</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="PbYGNB" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #2" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/PbYGNB/">Codevember AudioVis #2</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
]]></description><link>https://blog.rumyra.com/2016-11-02-codevember-number-two</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-02-codevember-number-two</guid><pubDate>Wed, 02 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Codevember Number One]]></title><description><![CDATA[<p>Welcome to my Codevember. This month I’m going to take you through some audio visualisation techniques in the browser. I’ve written and spoken about this a number of times, as well as made a few codepens every now and again, but I thought I would take this month to go over creating audio triggered visuals from the ground up.</p>
<p>Not only do I hope this be a learning journey for you, but one for me as well, there’s been a number of different techniques, new web features, libraries etc… that I’ve wanted to try, it seems like Codevember is the perfect opportunity.</p>
<p data-height="300" data-theme-id="1345" data-slug-hash="pEMGEP" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #1" class="codepen">See the Pen <a href="https://codepen.io/Rumyra/pen/pEMGEP/">Codevember AudioVis #1</a> by Rumyra (<a href="http://codepen.io/Rumyra">@Rumyra</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
<p>We’re going to start vanilla, from the very basics, just using the very minimal we can from the web audio API and some DOM elements, then slowly I’ll start trying some different techniques. By the end we would have covered audio analysing, new css techniques, d3.js which I find is so suited to audio-vis, bringing in some svgs and hopefully some canvas too.</p>
<p>And along with each technique I’ll be taking influence from somewhere different, be that an artist, a book from the <a href="https://www.instagram.com/p/BLWXiGdDDmo/?taken-by=rumyra">stepshelf</a> or some tumblr somewhere.</p>
<p>By the end of the month you’ll understand why audio vis has excited me for all these years, and why the browser can be such an incredible environment for this creativity.</p>
<p>A couple of things to note:</p>
<ul>
<li>This is a learning experience for me too, so things may stay quite basic. The code will probably <em>be</em> basic, however this does mean it won’t be too complicated for entry level coders.</li>
<li>I’ll be analysing audio from the microphone, which means I’ll be using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API">Media Streams API</a>, which only works over https, you’ll need to view the pens over https://codepen.io</li>
<li>Things work best in Canary so I’ve noticed, please don’t expect pens to work cross browser. The main end game for me is to integrate them into my VJ software, which I run in a sandboxed environment (my machine, my choice of browser) sux I know!</li>
<li>I’ll be cross posting all these articles to both my <a href="https://codepen.io/Rumyra/posts/published/">Codepen Blog</a> and <a href="http://rumyrashead.com/">my personal blog</a>.</li>
<li>There's a high chance I won't make every single day, but I will try 🙃</li>
</ul>
<h2>So Let’s Begin</h2>
<h3>Basic audio analysis and DOM manipulation</h3>
<p>Let’s start with the audio things we’re going to need. The audio API can be a bit over whelming. There’s a whole bunch of properties and methods you get when you create a new audio context. There’s inputs, filters, effects… but we can feel a bit better because we only need one piece of functionality - the analyser.</p>
<h4>Setting up the audio API</h4>
<p>Let’s start by creating a new audio context and initiating our variables.</p>
<pre><code class="language-javascript">// set up audio context
var audioContext = (window.AudioContext || window.webkitAudioContext);
// create audio class
if (audioContext) {
  // Web Audio API is available.
  var audioAPI = new audioContext();
  } else {
  // Web Audio API is not available. Ask the user to use a supported browser.
  alert("Oh nos! It appears your browser does not support the Web Audio API, please upgrade or use a different browser");
}

// variables
var analyserNode,
  frequencyData = new Uint8Array(256);
const screen = document.querySelector('#screen'),
  allRepeatedEls = document.querySelectorAll('#screen section'),
  totalEls = allRepeatedEls.length;
</code></pre>
<p>Here we’re checking the browser has the audio API available and instantiating a new context <code>var audioAPI</code> for use.</p>
<p>Then we’re just creating a few variables for use later on.</p>
<p>Now we need to hook into the functionality of the analyser node that comes with the audio API. The analyser node comes with methods for us to access both frequency and time data, for what we want we just need the <code>getByteFrequencyData</code> method which we will use later. But as that uses ‘fft’ data (fast fourier transform) we need to set up an array for that data to be saved into, and also set the size. This is where the <code>frequencyData = new Uint8Array(256)</code> comes into play above. A good way to view the size is it’s a bit like resolution - the bigger this array, the more intricate the data and thus the more information about the frequencies heard we can display. This is more than likely set to around 1024, however for the purposes of a simple visualisation like this first one I’m taking you through, 256 more than suffices.</p>
<p>So let’s create and connect our analyser node:</p>
<pre><code class="language-javascript">function createAnalyserNode(audioSource) {
  analyserNode = audioAPI.createAnalyser();
  analyserNode.fftSize = 512;
  audioSource.connect(analyserNode);
}
</code></pre>
<p>Note that the <code>fftSize</code> property has been set to twice the array size we set earlier. The in depth stuff behind fast Fourier transforms are slightly out of the remit of this article, but you can <a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">read more here</a>.</p>
<p>Another thing to note is we <em>connect</em> the analyser node to the audio source, as all methods within the audio API are are viewed upon as nodes that you connect together. So you can connect inputs to filters to volume nodes to analysers etc…</p>
<h4>Getting some sound</h4>
<p>Now we want an input for the audio API to analyse, we can just grab the microphone input: (NB this API needs permissions and only works over https or on localhost… just change the codepen url to have https:// at the beginning).</p>
<pre><code class="language-javascript">// getUserMedia success callback -> pipe audio stream into audio API
var gotStream = function(stream) {
  // Create an audio input from the stream.
  var audioSource = audioAPI.createMediaStreamSource(stream);
  createAnalyserNode(audioSource);
  animateStuff();
}

navigator.mediaDevices.getUserMedia({ audio: true, video: false })
  .then(gotStream);
</code></pre>
<p>We’re calling the <code>gotStream</code> function when we receive an audio stream from the microphone, and within that we’re piping it into the audio API and calling the <code>createAnalyserNode</code> function from above.</p>
<p>So the audio API now is analysing the audio stream from the microphone and we can stop here. But, we kinda want to move something around the browser based on the data we receive.</p>
<h4>Animating stuff</h4>
<p>You may have noticed the <code>gotStream</code> function calling <code>animateStuff()</code> which we haven’t written yet. Now here’s the fun part.</p>
<pre><code class="language-javascript">function animateStuff() {
  requestAnimationFrame(animateStuff);
  analyserNode.getByteFrequencyData(frequencyData);
}
</code></pre>
<p>This is the start of our awesome animating function. We want it to keep running and analysing the sound, so we’ll use <code>requestAnimationFrame</code> for that. Then we call the <code>getByteFrequencyData</code> method on the analyser node we connected earlier and pass in our frequencyData array. This means at every item in our array represents a frequency and when called a volume level is being logged against that frequency.</p>
<p>The volume, (it’s actually amplitude, but, meh words), is just a number and we can use that number to change things, it’s updating all the time because of our <code>requestAnimationFrame</code>.</p>
<p>So to my inspiration for this set. Let me introduce <a href="https://www.artsy.net/artist/bridget-riley">Bridget Riley</a>. I only discovered her this year on a visit to the <a href="https://www.nationalgalleries.org/visit/introduction-118">Scottish Gallery of Modern Art</a> in Edinburgh - such stunning paintings! I knew as soon as I walked into the exhibition I had to make some of them move!</p>
<figure>
  <img src="/media/bridgetBook.jpg" />
  <figcaption>Bridget Rileys Book from the Scottish exhibition</figcaption>
</figure>
<p>So let’s start with 'Rattle'. It’s a simple one where we can just create some sections and style them with background gradients and then make them shrink and grow horizontally to the sound.</p>
<figure>
  <img src="/media/rattle.jpg" />
  <figcaption>Bridget Riley: Rattle</figcaption>
</figure>
<pre><code class="language-html">&lt;div id="screen">
  &lt;section>&lt;/section>
  &lt;section>&lt;/section>
  &lt;section>&lt;/sect&lt;on>
  &lt;section>&lt;/section>
  &lt;section>&lt;/section>
  &lt;section>&lt;/section>
  &lt;section>&lt;/section>
  &lt;section>&lt;/section>
&lt;/div>
</code></pre>
<pre><code class="language-css">#screen {
  position: relative; padding:1vh;
  width: 100vw; height: 100vh;
  box-sizing: border-box;
  background: black;
}
#screen section {
  height:8vh; margin: 3vh;
  background-color: mediumorchid;
  background-image: media/ linear-gradient(45deg, mediumorchid 9%, seagreen 9%, seagreen 16%, white 16%, white 34%, seagreen 34%, seagreen 41%, mediumorchid 41%, mediumorchid 59%, seagreen 59%, seagreen 66%, white 66%, white 84%, seagreen 84%, seagreen 91%, mediumorchid 91% );
  background-size: 2vh 2vh;
}
#screen section:nth-of-type(2n) {
  background-image: media/ linear-gradient(135deg, indianred 9%, seagreen 9%, seagreen 16%, white 16%, white 34%, seagreen 34%, seagreen 41%, indianred 41%, indianred 59%, seagreen 59%, seagreen 66%, white 66%, white 84%, seagreen 84%, seagreen 91%, indianred 91% );
}
</code></pre>
<p>Now we have 8 sections, all stretched along our <em>screen</em> div. Let’s loop over them and change their width depending on the volume of a frequency.</p>
<p>You may have noticed already we have 256 frequencies and only 8 sections. There’s a couple of ways we can <em>play</em> this, (sorry), we can either use the first 8 items in the frequency array for the first section and the next 8 for the next and so on, or we can jump 32 items and get a range of 8 frequencies from our spectrum. The choice is yours really - now it’s just about having fun and playing with the maths. Sometimes it also depends on what music you’re playing.</p>
<p>For simplicity, I’m going to jump.</p>
<pre><code class="language-javascript">function animateStuff() {
  requestAnimationFrame(animateStuff);
  analyserNode.getByteFrequencyData(frequencyData);

  for (let i=0; i&lt;totalEls; i++) {
    var freqVol = frequencyData[i*32]/2;
    allRepeatedEls[i].style.width = freqVol+'vw';
  }

}
</code></pre>
<p>The volume values received back from the analyser node range from 0-255, so I’m dividing by 2 to give rough value for the section to take up.</p>
<p>As the weeks go by we’ll find better, more smoother ways of dealing with the DOM, but for today; huzzah! We made some things move to the music - it plays pretty well to <a href="https://www.youtube.com/watch?v=1plPyJdXKIY">Warrant G and Nate Dog - Regulate</a>, if you were wondering…</p>
]]></description><link>https://blog.rumyra.com/2016-11-01-codevember-number-one</link><guid isPermaLink="true">https://blog.rumyra.com/2016-11-01-codevember-number-one</guid><pubDate>Tue, 01 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[A Little Thing About Blends]]></title><description><![CDATA[<p>I learnt a little thing whilst playing around with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode">CSS blend modes</a> this morning which I thought I should share.</p>
<p>I was just making a little visual:</p>
<figure class="media-feature">
  <img src="/media/visualPlain.jpg" />
  <figcaption>Visual without blend modes</figcaption>
</figure>
<p>And I thought, wouldn't it be lovely to have some CSS blend modes to add some 🤗</p>
<p>So I wrote a little Sass @each to try them out. Firstly here's the HTML of one <em>flower</em>, of which I have nine.</p>
<pre><code class="language-html">&lt;section>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
  &lt;div>&lt;i>&lt;/i>&lt;/div>
&lt;/section>
</code></pre>
<p>A bit gumphy, but rotating and sizing and well yeh... Then the @each</p>
<pre><code class="language-css">@each $num, $blendMode in
  ( 1:overlay, 2:darken, 3:color-dodge, 4:color-burn, 5:hard-light, 6:difference, 7:hue, 8:saturation, 9:luminosity ) {
  #ohFour #screen section:nth-of-type(#{$num}) i {
    mix-blend-mode: $blendMode;
  }
}
</code></pre>
<p>There are more modes than this, but I've only got 9 sections and we can subsitute.</p>
<p>Spot the obvious mistake. By putting the blend mode onto the <code>i</code> element, we see no difference. As per the spec:</p>
<blockquote>
<p>The mix-blend-mode CSS property describes how an element's content should blend with the content of the element's direct parent and the element's background.</p>
</blockquote>
<p>So let's back up and put it on the <code>section</code>. Phew, there we go that's better.</p>
<figure class="media-feature">
  <img src="/media/visualFirstBlend.jpg" />
  <figcaption>Visual with first blend modes</figcaption>
</figure>
<hr />
<h2>Slow rendering and FPS Monitor</h2>
<p>Now we could have put the blend mode on the <code>div</code> elements. However the performance changes dramtically.</p>
<p>What with the audio analysis, amount of DOM elements and animation <em>with</em> these blend modes is pretty trying in Chrome. I'm getting about 5fps when on the <code>div</code>. Whereas on the <code>section</code> I run at about 15fps. Not amazing, but I wonder who would notice in a club.</p>
<p>If you want to check out the FPS monitor in Chrome Dev Tools, just open them, click on the menu at the top right (three vertical dots), choose <em>'More tools'</em> -&gt; <em>'Rendering settings'</em> and check <em>'FPS Meter'</em>.</p>
<h2>Different Blend Modes</h2>
<p>Yeh I know you see it too. We've lost the little <em>flowers</em> in the centre. Some blend modes don't like being blended against black. Let's change that @each up a bit!</p>
<figure class="media-feature">
  <img src="/media/visualSecBlend.jpg" />
  <figcaption>Visual with second blend modes</figcaption>
</figure>
<p>I'm gonna be having some fun with CSS Blend Modes! Chroma key on video anyone?</p>
]]></description><link>https://blog.rumyra.com/2016-10-20-a-little-thing-about-blends</link><guid isPermaLink="true">https://blog.rumyra.com/2016-10-20-a-little-thing-about-blends</guid><pubDate>Thu, 20 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[A Year On...]]></title><description><![CDATA[<p>It’s been a year since I wrote for Geek Mental Health week about my (then) recent experiences with depression. It’s both strange and fitting that it’s a year on.</p>
<h3>It’s been one hell of a year.</h3>
<p>Re-reading the article now it seems such a sensible read. I really felt like I was on the road to recovery in last October, but the road was longer than I expected, and I’m pretty sure there’s still a long way to go.</p>
<p>I’d had nearly a couple of months off over the summer and was integrated back into work by the time I wrote that article. Looking back now of course that was not enough time, it was rushed. Not just because you start to feel better and so think you <em>are</em> better, but people around you are urging you to get better as well and that’s because they want you to be better. Unfortunately it’s not that simple. I was still recovering from quite a big shock.</p>
<p>The only way I can describe the way I was feeling is that all my skin had been worn away by things that had happened, sanded down, and I couldn’t take any more things wearing it away. I needed recovery to build it all back up again and that was going to take a lot of time.</p>
<h3>I was better, but I wasn’t well.</h3>
<p>With the support of councilling, I had made some decisions about the changes I wanted to make in my life, some of which were driving the unhappiness, some I hoped would help me move on. Buying a house and leaving my job where two of them. House buying happened over new year and it was very stressful, a few other things were going on as well, normal everyday things, physical health issues arose, some personal relationship things. Things that are normally quite capable, but on top of everything else, by the time the house went through, everything had come crashing back down around me.</p>
<p>In February I took yet another month off work.</p>
<p>I still hadn’t stopped seeing my councillor at this point. This ended up being one of the most beneficial things in terms of my recovery, and there were definitely times I felt it wasn’t right or I didn’t need to see her anymore, but I stuck with it and I am glad. Again I was integrated back into work, but this time I could hand in my notice. This was the biggest drain on my well being and leaving has irrefutably improved my health.</p>
<h3>Slowly but surely I started to see a change.</h3>
<p>I started to stand on my own two feet again and move my life out of this bleak emptiness that engulfed it.</p>
<p>As with these things days are still a struggle. And it comes and goes in waves. But I was with my mum the other day, who said I was noticeably different, I didn’t look so withdrawn and colourless. I don’t feel so colourless anymore, I don’t feel like a shell, I feel like there’s something inside me again. I hold on to this.</p>
<p>Last year was about being unwell and I stand by my last article, if you feel unwell please seek help, because this year, for me, this year has been about getting better. I hope now I can focus on getting well.</p>
<p>But, don’t try to rush getting better, I know it’s an easy thing to say. I’ve never wanted my mental health to define me, even before the crash of last year, so I never give myself a break. This isn’t healthy, when you’re sick, you need to recover.</p>
]]></description><link>https://blog.rumyra.com/2016-10-05-a-year-on</link><guid isPermaLink="true">https://blog.rumyra.com/2016-10-05-a-year-on</guid><pubDate>Wed, 05 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[✨ Rumyra's Cool Links! ✨]]></title><description><![CDATA[<p>I wrote this two days ago when I was stuck in an airport. I'm sure each one of you has frequented an airport recently what with it being the summer holidays and all. In fact you might even be reading this in an airport. It's not a long one, I've been a bit out of touch with the travelling, but there's still some gems 💎</p>
<p><a href="https://twitter.com/onishiweb">Adam's</a> been doing some great writing recently, check out <a href="http://adamonishi.com/">his blog</a> if you don't already. <a href="http://adamonishi.com/2016/08/web-components-and-progressive-enhancement/">This article about Web Components and progressive enhancements</a> is especially cool.</p>
<p>Something also super helpful for me recently was <a href="https://blog.codecentric.de/en/2016/07/getting-started-webpack/">this blog post from Daniel Mies</a> about getting started with webpack. I was postCSS/cssnext-ing and not only was <a href="https://twitter.com/danielmies">Daniel</a> extremely helpful (super cool person to follow), but so was his post.</p>
<p><a href="http://mewo2.com/notes/terrain/">Generate your own map</a> using a really well thought out process and well documented. In face check out <a href="http://mewo2.com/">Martin's homepage</a> it appears everything he does is a pretty cool link.</p>
<p>Not audio enough for you yet? I've been checking out and playing around with <a href="https://github.com/Tonejs/Tone.js">Tone.js</a> recently. It's a super nice layer over the Web Audio API. Me and <a href="https://twitter.com/_2xAA">Sam</a> put together a cool thing which I will share after I've stopped demoing it at conferences. (I promise it's super cool).</p>
<p>Not cool enough for you yet?  Check out <a href="http://executabledreams.net/B/emojiwin">this insane emoji fest</a> - solitare style graphics on canvas - also supports multi touch events! Yup, I think it's actually too cool. 🎶💥🎉😎💙</p>
<p>Oh and it's my birthday in a month. Yes, I know you're thinking: 'What the 😳 can I get Ruth? She's already got like 5 MIDI controllers...' Well you can totally <a href="https://www.paypal.me/rumyra">donate to the Holtzmanns glasses fund</a>. Yes I super think having a <a href="http://www.liveforfilm.com/2016/08/04/ghostbusters-you-can-buy-holtzmanns-glasses/">pair of these</a> from the recent Ghostbusters would be super cool to VJ in 😎-&gt;😆 Hell I'd even wear them when writing these cool links posts, and that would easily make them ten times cooler!</p>
]]></description><link>https://blog.rumyra.com/2016-08-23-rumyra-s-cool-links</link><guid isPermaLink="true">https://blog.rumyra.com/2016-08-23-rumyra-s-cool-links</guid><pubDate>Tue, 23 Aug 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Font Awesome SVGs]]></title><description><![CDATA[<p>Doing a lot of prototyping in the past, having <a href="http://fontawesome.io/">Font Awesome</a> as part of my front end starter files was always really handy for quickly adding icons when I was building a UI.</p>
<p>Nowadays we are more aware that using a font to represent icons isn’t necessarily the most accessible thing to do for everyone, <a href="https://www.youtube.com/watch?v=9xXBYcWgCHA">as Serend explains here</a>.</p>
<p>So as I’m whipping up a website right at this moment I thought it a good opportunity to take the first steps to swap out the font for svgs. So…</p>
<h5><a href="https://github.com/Rumyra/Font-Awesome-SVGs">Here’s a repo with font awesome icons as svgs</a></h5>
<ol>
<li>I forked the Font Awesome repo so I can keep it as up to date with the original as I can.</li>
<li>I added an SVG folder to add all the generated glyphs to.</li>
<li>I used <a href="https://www.npmjs.com/package/font-blast">font blast</a> to generate SVGs from a font, a la <a href="https://sarasoueidan.com/blog/icon-fonts-to-svg/">Sara Soueidan mentions in her blog post here</a>.</li>
<li>To include the SVG’s I used the CSS Inline SVG Sprites method, <a href="https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/">again described by Sara here</a>. It seemed the easiest to integrate with the set up I already had, as I was using classes to add icons to elements.</li>
</ol>
<p>The most long winded part was making sure I had all the correct icons - I think a good addition to this repo would be a generated spite sheet with stylesheet companion and easy reference classes. I’ve opened an issue 😎</p>
<p>———————————————</p>
<p>All Font Awesome licensing etc… still applies. Info etc… is in the origin <a href="https://github.com/FortAwesome/Font-Awesome">readme here</a></p>
]]></description><link>https://blog.rumyra.com/2016-07-25-font-awesome-svgs</link><guid isPermaLink="true">https://blog.rumyra.com/2016-07-25-font-awesome-svgs</guid><pubDate>Mon, 25 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[✨ Rumyra's Cool Links! ✨]]></title><description><![CDATA[<p>Phew, isn’t it warm 🌞🔥☀️*</p>
<p>Well then, I guess it’s time for another instalment of ‘Rumyra’s Cool Links’ (the time will come when this has it’s own space).</p>
<p><em>*For those viewing outside the UK it was 35 degrees yesterday and the country melted, we are currently trying to reanimate ourselves.</em></p>
<p>Easily and undoubtedly top of my cool links this time is <a href="https://codepen.io/jakealbaugh/full/qNrZyw">Jake Albaugh’s arpeggiator</a>. I just can <em>not</em> get enough of this. What an inspired, solid, clever and useful piece of engineering. It basically sums up everything ever about ‘why do we have the audio api again?’.</p>
<p>This. That is all. Thanks <a href="https://twitter.com/jake_albaugh">Mr. Albaugh</a></p>
<p>There is also <a href="http://superlooper.universlabs.co.uk/">Superlooper</a> from <a href="http://www.universlabs.co.uk/">Univers Labs</a> which not only contains beautiful loops but also visuals which are just simple but inspirational. (Very close to my own doodles around A/V so they’ll be more like this I’m sure).</p>
<p>If you want a hand with your audio visual creations <a href="https://twitter.com/likethemammal">Chris Dolphin</a> has created <a href="https://github.com/likethemammal/visualizer-micro">visualizer-micro.js</a> a teeny library wrapping just the analysis parts of the audio API, inspired by the methods from that ol’ dancer.js (man that feels like a decade ago right?).</p>
<p>Other things that are cool include <a href="http://bigstory.ap.org/article/ab73d19c160c4c509dc6b9decfec3c0f/south-korea-uses-technology-help-pregnant-women-get-seats">a great use of beacon technology to help pregnant women</a>.</p>
<p><a href="https://www.youtube.com/watch?v=hKRLcQ2Y8kA">This talk I saw at JS Oxford last month</a> by <a href="https://twitter.com/ashok_menon">Ashok Menon</a> literally writing a language <em>with</em> a language, or something, it was all like 😳 Very cool tho.</p>
<p>I know others have linked to it, but the tab’s been open so long I couldn’t not include it. This is a <a href="http://a.singlediv.com/">great showcase of what you can do with just one div and a love affair with CSS</a>.</p>
<p>And if you’re still hot after all that go and buy yourself a cool print, I saw this one and thought it was cool: <a href="http://www.wearedorothy.com/shop/inside-information-minimoog">The insides of a Minimoog</a> featuring all your fav artists.</p>
]]></description><link>https://blog.rumyra.com/2016-07-20-rumyra-s-cool-links</link><guid isPermaLink="true">https://blog.rumyra.com/2016-07-20-rumyra-s-cool-links</guid><pubDate>Wed, 20 Jul 2016 00:00:00 GMT</pubDate></item></channel></rss>